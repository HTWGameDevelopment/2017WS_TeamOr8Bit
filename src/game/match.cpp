#include "match.hpp"

using namespace gamespace;

void Match::setMarkers() {
    const hextile::hexpoint_t aoe[] = {
        {7, 0},
        {8, 0},
        {9, 0},
        {10, 0},
        {11, 0},
        {12, 0},
        {7, 1},
        {8, 1},
        {9, 1},
        {10, 1},
        {11, 1},
        {12, 1},
        {7, 2},
        {8, 2},
        {9, 2},
        {10, 2},
        {11, 2},
        {12, 2},
        {7, 3},
        {8, 3},
        {9, 3},
        {10, 3},
        {11, 3},
        {12, 3},
        {7, 4},
        {8, 4},
        {9, 4},
        {10, 4},
        {11, 4},
        {12, 4},
        {7, 5},
        {8, 5},
        {9, 5},
        {10, 5},
        {11, 5},
        {12, 5},
        {7, 6},
        {8, 6},
        {9, 6},
        {10, 6},
        {11, 6},
        {12, 6},
        {7, 7},
        {8, 7},
        {9, 7},
        {10, 7},
        {11, 7},
        {12, 7},
        {7, 8},
        {8, 8},
        {9, 8},
        {10, 8},
        {11, 8},
        {12, 8},
        {7, 9},
        {8, 9},
        {9, 9},
        {10, 9},
        {11, 9},
        {12, 9},
        {7, 10},
        {8, 10},
        {9, 10},
        {10, 10},
        {11, 10},
        {12, 10}
    };
    for(unsigned int i = 0; i < sizeof(aoe) / sizeof(hextile::hexpoint_t); ++i) {
        _board[aoe[i].x][aoe[i].y].mark(AOE_LAYER, 1);
    }
}

struct roff_t {
    hextile::hexpoint_t c;
    float height;
};

void Match::setRenderOffsets() {
    const roff_t offs[] = {
        roff_t{hextile::hexpoint_t{0,4}, 3},
        roff_t{hextile::hexpoint_t{1,4}, 3},
        roff_t{hextile::hexpoint_t{2,5}, 3},
        roff_t{hextile::hexpoint_t{2,6}, 3},
        roff_t{hextile::hexpoint_t{1,6}, 3},
        roff_t{hextile::hexpoint_t{1,5}, 3},
        roff_t{hextile::hexpoint_t{0,5}, 3},
        roff_t{hextile::hexpoint_t{0,6}, 3},
        roff_t{hextile::hexpoint_t{1,7}, 3},
        roff_t{hextile::hexpoint_t{0,7}, 3},
        roff_t{hextile::hexpoint_t{1,8}, 3},
        roff_t{hextile::hexpoint_t{0,8}, 3},
        roff_t{hextile::hexpoint_t{1,9}, 3},
        roff_t{hextile::hexpoint_t{1,10}, 3},
        roff_t{hextile::hexpoint_t{0,10}, 3},
        roff_t{hextile::hexpoint_t{0,9}, 3},
        roff_t{hextile::hexpoint_t{1,11}, 3},
        roff_t{hextile::hexpoint_t{1,12}, 3},
        roff_t{hextile::hexpoint_t{0,12}, 3},
        roff_t{hextile::hexpoint_t{1,13}, 3},
        roff_t{hextile::hexpoint_t{2,13}, 3},
        roff_t{hextile::hexpoint_t{2,12}, 3},
        roff_t{hextile::hexpoint_t{3,13}, 3},
        roff_t{hextile::hexpoint_t{4,13}, 3},
        roff_t{hextile::hexpoint_t{5,13}, 3},
        roff_t{hextile::hexpoint_t{6,13}, 3},
        roff_t{hextile::hexpoint_t{14,13}, 3},
        roff_t{hextile::hexpoint_t{15,13}, 3},
        roff_t{hextile::hexpoint_t{16,14}, 3},
        roff_t{hextile::hexpoint_t{17,14}, 3},
        roff_t{hextile::hexpoint_t{17,13}, 3},
        roff_t{hextile::hexpoint_t{18,12}, 3},
        roff_t{hextile::hexpoint_t{17,12}, 3},
        roff_t{hextile::hexpoint_t{18,13}, 3},
        roff_t{hextile::hexpoint_t{19,13}, 3},
        roff_t{hextile::hexpoint_t{19,11}, 3},
        roff_t{hextile::hexpoint_t{18,10}, 3},
        roff_t{hextile::hexpoint_t{19,10}, 3},
        roff_t{hextile::hexpoint_t{19,9}, 3},
        roff_t{hextile::hexpoint_t{18,8}, 3},
        roff_t{hextile::hexpoint_t{19,8}, 3},
        roff_t{hextile::hexpoint_t{19,7}, 3},
        roff_t{hextile::hexpoint_t{18,7}, 3},
        roff_t{hextile::hexpoint_t{18,6}, 3},
        roff_t{hextile::hexpoint_t{19,6}, 3},
        roff_t{hextile::hexpoint_t{17,6}, 3},
        roff_t{hextile::hexpoint_t{18,5}, 3},
        roff_t{hextile::hexpoint_t{19,5}, 3},
        roff_t{hextile::hexpoint_t{19,4}, 3}
    };
    for(unsigned int i = 0; i < sizeof(offs) / sizeof(roff_t); ++i) {
        _board[offs[i].c.x][offs[i].c.y].renderData() = offs[i].height;
    }
}
